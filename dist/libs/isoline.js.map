{"version":3,"sources":["../../src/libs/isoline.js"],"names":["meta","helper","getLHPoints","isolines","pf","close","mergeAndFilter","low","topFeature","high","reverse","map","f","push","value","featureCollection","data","features","x","waiting","flattenEach","fi","fsi","coords","geometry","coordinates","cf","cl","length","Math","abs","forEach","c","m","merge","re","fs","filter","within","shift","mf","find","ff","ffcf","ffcl","mergeFeature","splice","findIndex","to","from","toc","concat","fromc","tof","tol","fromf","froml","nf","isOut","isIn","p","p1","w"],"mappings":"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","file":"isoline.js","sourcesContent":["import * as meta from '@turf/meta'\nimport * as helper from '@turf/helpers'\nimport centerOfMass from '@turf/center-of-mass'\nimport pointsWithinPolygon from '@turf/points-within-polygon'\nimport lineToPolygon from '@turf/line-to-polygon'\nfunction getLHPoints(isolines) {\n  let pf = []\n  let close = mergeAndFilter(isolines)\n  let low = topFeature(close)\n  let high = topFeature(close.reverse())\n  low.map(f => pf.push(centerOfMass(lineToPolygon(f), { value: 0 })))\n  high.map(f => pf.push(centerOfMass(lineToPolygon(f), { value: 1 })))\n\n  return helper.featureCollection(pf)\n}\nfunction mergeAndFilter(data) {\n  let close = data.features.map(x => [])\n  let waiting = data.features.map(x => [])\n  meta.flattenEach(data, function (f, fi, fsi) {\n    let coords = f.geometry.coordinates\n    let cf = coords[0]\n    let cl = coords[coords.length - 1]\n    if (cf[0] === cl[0] && cf[1] === cl[1]) { close[fi].push(f) } else if (cf[0] === cl[0] && Math.abs(cf[0]) === 180) {\n      if (cf[0] === -180) {\n        coords.forEach(c => {\n          c[0] += 360\n        })\n      }\n      waiting[fi].push(f)\n    }\n  })\n  for (let m = 0; m < waiting.length; m++) {\n    merge(waiting[m]).map(f => close[m].push(f))\n  }\n  // 过滤同一区间出现的相同等值线\n  let re = []\n  close.map(fs => re.push(fs.filter(f => {\n    for (let m = 0; m < fs.length; m++) {\n      if (f !== fs[m] && within(f, fs[m])) { return false }\n    }\n    return true\n  })))\n  return re\n\n  /**\n   * 合并\n   * @param fs\n   */\n  function merge(fs) {\n    let re = []\n    while (fs.length > 0) {\n      let f = fs.shift()\n      let coords = f.geometry.coordinates\n      let cf = coords[0][1]\n      let cl = coords[coords.length - 1][1]\n      let mf = fs.find(ff => {\n        let ffcf = ff.geometry.coordinates[0][1]\n        let ffcl = ff.geometry.coordinates[ff.geometry.coordinates.length - 1][1]\n        return cf === ffcf || cf === ffcl || cl === ffcf || cl === ffcl\n      })\n      if (mf) {\n        if (mergeFeature(mf, f)) {\n          re.push(mf)\n          fs.splice(fs.findIndex(x => x === mf), 1)\n        }\n      }\n    }\n    return re\n  }\n\n  function mergeFeature(to, from) {\n    let toc = [].concat(to.geometry.coordinates)\n    let fromc = [].concat(from.geometry.coordinates)\n    let tof = toc[0][1]\n    let tol = toc[toc.length - 1][1]\n    let fromf = fromc[0][1]\n    let froml = fromc[fromc.length - 1][1]\n    if (tof === fromf) {\n      fromc.shift()\n      fromc.reverse()\n      to.geometry.coordinates = fromc.concat(toc)\n    } else if (tol === fromf) {\n      fromc.shift()\n      to.geometry.coordinates = toc.concat(fromc)\n    } else if (tof === froml) {\n      toc.shift()\n      to.geometry.coordinates = fromc.concat(toc)\n    } else if (tol === froml) {\n      fromc.reverse()\n      fromc.shift()\n      to.geometry.coordinates = toc.concat(fromc)\n    }\n    return to.geometry.coordinates[0][1] === to.geometry.coordinates[to.geometry.coordinates.length - 1][1]\n  }\n}\n\n/**\n* 返回最上层\n* @param fs\n*/\nfunction topFeature(fs) {\n  let re = []\n  for (let m = 0; m < fs.length - 1; m++) {\n    fs[m].map(cf => {\n      let nf = fs[m + 1].find(f => within(cf, f))\n      if (nf) {\n        nf.isOut = true\n        cf.isIn = true\n      }\n    })\n  }\n  fs.map(ff => {\n    ff.map(f => {\n      if (f.isIn && (!f.isOut)) { re.push(f) }\n      delete f.isIn\n      delete f.isOut\n    })\n  })\n  return re\n}\n\nfunction within(cf, f) {\n  let p = cf.geometry.coordinates[0]\n  let p1 = [p[0] + 360, p[1]]\n  let w = pointsWithinPolygon(helper.featureCollection([p, p1]), helper.featureCollection([lineToPolygon(f)]))\n  return w.features.length !== 0\n}\n\nexport {\n  getLHPoints\n}\n\n"]}